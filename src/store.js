import { createStore, applyMiddleware } from 'redux'; 
//Эта строка импортирует функции createStore и applyMiddleware из библиотеки Redux.

//Middleware — это функции, которые могут перехватывать действия перед тем, как они 
//достигнут редукторов. 
//Они могут изменять действия, выполнять дополнительные операции или даже прерывать 
//выполнение действий.

//applyMiddleware — это функция, которая принимает один или несколько middleware и 
//применяет их к хранилищу Redux. 
//Это позволяет middleware перехватывать действия и выполнять дополнительные операции перед тем, 
//как действия достигнут редукторов.

import authReducer from './reducers';// tyt ponyatno
import thunk from 'redux-thunk';
//Эта строка импортирует middleware thunk из библиотеки redux-thunk.
//thunk позволяет обрабатывать асинхронные действия в Redux.

import thunkMiddleware from 'redux-thunk'

//Создание хранилища
const store = createStore(authReducer, applyMiddleware(thunkMiddleware)); 
//applyMiddleware(thunk): Применяет middleware thunk к хранилищу. 
//Это позволяет обрабатывать асинхронные действия.

/**
 * createStore — это функция, предоставляемая библиотекой Redux. 
 * Она используется для создания хранилища (store), которое является центральным объектом в Redux,
 * управляющим состоянием вашего приложения.
 */

/**
 * Основные функции createStore
1.Создание хранилища:
createStore принимает редуктор (reducer) в качестве аргумента и возвращает объект хранилища.
Хранилище содержит всё состояние вашего приложения и предоставляет методы для его обновления и чтения.

2.Инициализация состояния:
Хранилище инициализируется с начальным состоянием, которое определяется редуктором.

3.Обработка действий:
ОЧЕНЬ ВАЖНО - Хранилище предоставляет метод dispatch, который используется для отправки действий (actions) в редуктор.
Редуктор обрабатывает действия и возвращает новое состояние.
 * 
 */


export default store;


//Этот код создает хранилище Redux, которое использует редуктор authReducer 
//и middleware thunk для обработки асинхронных действий. 
//Хранилище экспортируется по умолчанию, чтобы его можно было 
//использовать в других частях приложения, например, в файле index.js 
//для оборачивания приложения в Provider.
